{"version":3,"file":"component---src-pages-index-js-45cffe85d3bad9d419ba.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/layout.module.scss","webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/components/libraries.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/pages/index.module.scss","webpack://gatsby-starter-blog/./src/pages/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var column = \"layout-module--column--a7f9e\";","import * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport * as styles from \"./layout.module.scss\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header\n\n  if (isRootPath) {\n    header = (\n      <h1 className=\"main-heading\">\n        <Link to=\"/\">{title}</Link>\n      </h1>\n    )\n  } else {\n    header = (\n      <Link className=\"header-link-home\" to=\"/\">\n        {title}\n      </Link>\n    )\n  }\n\n  return (\n    <>\n      <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n        <div className={styles.column}>\n          <header className={`${styles.header} global-header`}>{header}</header>\n          <main className={styles.main}>{children}</main>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport default Layout\n","import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nexport const Libraries = () => {\n  const wp = useStaticQuery(graphql`\n    query {\n      appleTouchIcon: file(name: { eq: \"apple-touch-icon\" }) {\n        publicURL\n      }\n      favicon32: file(name: { eq: \"favicon-32x32\" }) {\n        publicURL\n      }\n      favicon16: file(name: { eq: \"favicon-16x16\" }) {\n        publicURL\n      }\n      webManifest: file(name: { eq: \"site\" }) {\n        publicURL\n      }\n      safariPinnedTab: file(name: { eq: \"safari-pinned-tab\" }) {\n        publicURL\n      }\n    }\n  `)\n\n  return (\n    <>\n      <link rel=\"stylesheet\" href=\"https://use.typekit.net/zax1sns.css\"></link>\n      <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n      <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossorigin />\n      <link\n        href=\"https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@100;300;400;800;900&family=Shippori+Mincho:wght@700&display=swap\"\n        rel=\"stylesheet\"\n      ></link>\n      <link\n        rel=\"apple-touch-icon\"\n        sizes=\"180x180\"\n        href={wp.appleTouchIcon.publicURL}\n      />\n      <link\n        rel=\"icon\"\n        type=\"image/png\"\n        sizes=\"32x32\"\n        href={wp.favicon32.publicURL}\n      />\n      <link\n        rel=\"icon\"\n        type=\"image/png\"\n        sizes=\"16x16\"\n        href={wp.favicon16.publicURL}\n      />\n      <link rel=\"manifest\" href={wp.webManifest.publicURL} />\n      <link\n        rel=\"mask-icon\"\n        href={wp.safariPinnedTab.publicURL}\n        color=\"#000000\"\n      />\n      <meta name=\"msapplication-TileColor\" content=\"#2d89ef\" />\n      <meta name=\"theme-color\" content=\"#ffffff\" />\n    </>\n  )\n}\n","import React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nexport const Seo = props => {\n  const {\n    pageTitle,\n    pageExcerpt,\n    pagePath,\n    pageType,\n    pageImage,\n    pageImageW,\n    pageImageH,\n  } = props\n  const {\n    site: {\n      siteMetadata: {\n        siteTitle,\n        siteDescription,\n        siteUrl,\n        facebookID,\n        twitter,\n        siteLang,\n        siteLocale,\n        siteOgpImg,\n        siteOgpImgW,\n        siteOgpImgH,\n      },\n    },\n    file: { publicURL },\n  } = useStaticQuery(graphql`\n    query SeoQuery {\n      site {\n        siteMetadata {\n          siteTitle\n          siteDescription\n          siteUrl\n          facebookID\n          twitter\n          siteLang\n          siteLocale\n          siteOgpImg\n          siteOgpImgW\n          siteOgpImgH\n        }\n      }\n      file(name: { eq: \"ogp\" }) {\n        publicURL\n      }\n    }\n  `)\n  /*-- langの設定 --*/\n  const lang = siteLang || `ja`\n  /*-- タイトルの設定 --*/\n  const metaTitle = pageTitle ? pageTitle + \"｜\" + siteTitle : siteTitle\n  /*-- 説明文の設定 --*/\n  const metaDescription = pageExcerpt\n    ? pageExcerpt.length > 120\n      ? pageExcerpt.slice(0, 120) + \"...\"\n      : pageExcerpt\n    : siteDescription\n  /*-- ページURLの設定 --*/\n  const metaUrl = pagePath ? `${siteUrl}${pagePath}` : `${siteUrl}`\n  /*-- サイトのtypeの設定 --*/\n  const metaType = pageType ? pageType : `article`\n  /*-- OGP画像の設定 --*/\n  let metaOgpImg = publicURL ? `${siteUrl}${publicURL}` : null\n  let metaOgpImgW = 1200\n  let metaOgpImgH = 630\n\n  if (pageImage) {\n    metaOgpImg = `${siteUrl}${pageImage}`\n    if (pageImageW && pageImageH) {\n      metaOgpImgW = pageImageW\n      metaOgpImgH = pageImageH\n    }\n  }\n\n  return (\n    <>\n      <html lang={lang} />\n      {/* ページのタイトルや説明文、canical */}\n      <title>{metaTitle}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <link rel=\"canonical\" href={metaUrl} />\n      {/* OGP */}\n      <meta property=\"og:type\" content={metaType} />\n      <meta property=\"og:title\" content={metaTitle} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:url\" content={metaUrl} />\n      <meta property=\"og:image\" content={metaOgpImg} />\n      <meta property=\"og:image:width\" content={metaOgpImgW} />\n      <meta property=\"og:image:height\" content={metaOgpImgH} />\n      <meta property=\"og:site_name\" content={siteTitle} />\n      <meta property=\"og:locale\" content={siteLocale} />\n      <meta property=\"fb:app_id\" content={facebookID} />\n      {/* twitter */}\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:creator\" content={twitter} />\n      <meta name=\"twitter:site\" content={twitter} />\n    </>\n  )\n}\n\nexport default Seo\n","// extracted by mini-css-extract-plugin\nexport var day = \"index-module--day--cab09\";\nexport var postsGrid = \"index-module--postsGrid--182a2\";\nexport var title = \"index-module--title--56ee9\";","import React, { useRef, useEffect } from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport { Libraries } from \"../components/libraries\"\n\nimport * as styles from \"./index.module.scss\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.siteTitle || `Title`\n  const posts = data.allMarkdownRemark.nodes\n\n  const skewRef = useRef([null])\n\n  useEffect(() => {\n    var items = document.querySelectorAll(\".skew\")\n\n    items.forEach(item => {\n      if (item) {\n        var matrix = window.getComputedStyle(item).transform\n        var matrixArray = matrix.replace(\"matrix(\", \"\").split(\",\")\n        var scale = parseFloat(matrixArray[3])\n        item.style.height = item.clientHeight * scale + \"px\"\n      }\n    })\n  }, [])\n\n  const postsByYear = data.allMarkdownRemark.edges.reduce((posts, { node }) => {\n    const date = node.frontmatter.date\n    let parts = date.split(\" \")\n    let year = parseInt(parts[0])\n\n    if (!posts[year]) {\n      posts[year] = []\n    }\n    posts[year].push(node)\n    return posts\n  }, {})\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <p>No blog posts found.</p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <div className={styles.postsGrid}>\n        <h2>global</h2>\n        <ol style={{ listStyle: `none` }}>\n          {Object.keys(postsByYear)\n            .reverse()\n            .map(year =>\n              postsByYear[year].map(post => {\n                const title = post.frontmatter.title || post.fields.slug\n                return post.frontmatter.category === \"global\" &&\n                  post.frontmatter.status === \"public\" ? (\n                  <li key={post.fields.slug}>\n                    <article\n                      className=\"post-list-item\"\n                      itemScope\n                      itemType=\"http://schema.org/Article\"\n                    >\n                      <header>\n                        <h3 ref={skewRef} className=\"skew\">\n                          <Link to={post.fields.slug} itemProp=\"url\">\n                            <span itemProp=\"headline\">{title}</span>\n                          </Link>\n                        </h3>\n                      </header>\n                    </article>\n                  </li>\n                ) : null\n              })\n            )}\n        </ol>\n      </div>\n      <div className={styles.postsGrid}>\n        {Object.keys(postsByYear)\n          .reverse()\n          .map(year => {\n            return (\n              <>\n                <h2 className={styles.label}>{year}</h2>\n                <ol style={{ listStyle: `none` }}>\n                  {postsByYear[year].map(post => {\n                    const title = post.frontmatter.title || post.fields.slug\n                    const date = post.frontmatter.date\n                    let parts = date.split(\" \")\n                    let month = parts[1]\n                    let day = parts[2]\n                    return post.frontmatter.category === \"post\" &&\n                      post.frontmatter.status === \"public\" ? (\n                      <li key={post.fields.slug}>\n                        <article\n                          className=\"post-list-item\"\n                          itemScope\n                          itemType=\"http://schema.org/Article\"\n                        >\n                          <header>\n                            <h3 ref={skewRef} className=\"skew\">\n                              <Link to={post.fields.slug} itemProp=\"url\">\n                                <div\n                                  className={styles.title}\n                                  itemProp=\"headline\"\n                                >\n                                  <span className={styles.day}>\n                                    {month}-{day}\n                                  </span>\n                                  <span>{title}</span>\n                                </div>\n                              </Link>\n                            </h3>\n                          </header>\n                        </article>\n                      </li>\n                    ) : null\n                  })}\n                </ol>\n              </>\n            )\n          })}\n      </div>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  {\n    site {\n      siteMetadata {\n        siteTitle\n      }\n    }\n    allMarkdownRemark(\n      sort: { frontmatter: { date: DESC } }\n      filter: { frontmatter: { status: { eq: \"public\" } } }\n    ) {\n      nodes {\n        fields {\n          slug\n        }\n        frontmatter {\n          category\n          date(formatString: \"MM DD YYYY\")\n          title\n          description\n          status\n        }\n      }\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            category\n            date(formatString: \"YYYY MM DD\")\n            status\n          }\n        }\n      }\n    }\n  }\n`\n\nexport const Head = ({ location }) => {\n  return (\n    <>\n      <Seo pagePath={location.pathname} />\n      <Libraries />\n    </>\n  )\n}\n"],"names":["column","_ref","location","title","children","isRootPath","pathname","header","React","className","Link","to","styles","Libraries","wp","useStaticQuery","rel","href","crossorigin","sizes","appleTouchIcon","publicURL","type","favicon32","favicon16","webManifest","safariPinnedTab","color","name","content","props","pageTitle","pageExcerpt","pagePath","pageType","pageImage","pageImageW","pageImageH","site","siteMetadata","siteTitle","siteDescription","siteUrl","facebookID","twitter","siteLang","siteLocale","siteOgpImg","siteOgpImgW","siteOgpImgH","file","lang","metaTitle","metaDescription","length","slice","metaUrl","metaType","metaOgpImg","metaOgpImgW","metaOgpImgH","property","postsGrid","_data$site$siteMetada","data","posts","allMarkdownRemark","nodes","skewRef","useRef","useEffect","document","querySelectorAll","forEach","item","matrixArray","window","getComputedStyle","transform","replace","split","scale","parseFloat","style","height","clientHeight","postsByYear","edges","reduce","_ref2","node","parts","frontmatter","date","year","parseInt","push","Layout","listStyle","Object","keys","reverse","map","post","fields","slug","category","status","key","itemScope","itemType","ref","itemProp","month","day","Head","_ref3","Seo"],"sourceRoot":""}