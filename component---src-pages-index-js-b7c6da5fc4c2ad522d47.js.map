{"version":3,"file":"component---src-pages-index-js-b7c6da5fc4c2ad522d47.js","mappings":"mVACW,EAAM,2BACNA,EAAY,iCACZ,EAAQ,6BC8GnB,MAzGkB,IAAyB,IAAD,MAAvB,KAAEC,EAAI,SAAEC,GAAU,EACnC,MAAMC,GAAkC,QAAtB,EAAAF,EAAKG,KAAKC,oBAAY,aAAtB,EAAwBC,QAAK,QACzCC,EAAQN,EAAKO,kBAAkBC,MAE/BC,EAAcT,EAAKO,kBAAkBG,MAAMC,QAAO,CAACL,EAAM,KAAe,IAAd,KAAEM,GAAM,EAEtE,IAAIC,EADSD,EAAKE,YAAYC,KACbC,MAAM,KACnBC,EAAOC,SAASL,EAAM,IAM1B,OAJKP,EAAMW,KACTX,EAAMW,GAAQ,IAEhBX,EAAMW,GAAME,KAAKP,GACVN,CAAK,GACX,CAAC,GAIJ,OAFAc,QAAQC,IAAIZ,GAES,IAAjBH,EAAMgB,OAEN,gBAAC,IAAM,CAACrB,SAAUA,EAAUI,MAAOH,GACjC,yBAAG,yBAMP,gBAAC,IAAM,CAACD,SAAUA,EAAUI,MAAOH,GACjC,uBAAKqB,MAAOC,GACV,0BAAI,UACJ,sBAAIC,MAAO,CAAEC,UAAU,SACpBC,OAAOC,KAAKnB,GACVoB,UACAC,KAAIb,GACHR,EAAYQ,GAAMa,KAAIC,IACpB,MAAM1B,EAAQ0B,EAAKjB,YAAYT,OAAS0B,EAAKC,OAAOC,KACpD,MAAqC,WAA9BF,EAAKjB,YAAYoB,UACM,WAA5BH,EAAKjB,YAAYqB,OACjB,sBAAIC,IAAKL,EAAKC,OAAOC,MACnB,2BACEI,UAAU,iBACVC,WAAS,EACTC,SAAS,6BAET,8BACE,0BACE,gBAAC,EAAAC,KAAI,CAACC,GAAIV,EAAKC,OAAOC,KAAMS,SAAS,OACnC,wBAAMA,SAAS,YAAYrC,QAMnC,IAAI,QAKlB,uBAAKkB,MAAOC,GACTG,OAAOC,KAAKnB,GACVoB,UACAC,KAAIb,GAED,gCACE,sBAAIM,MAAOC,EAAAA,OAAeP,GAC1B,sBAAIQ,MAAO,CAAEC,UAAU,SACpBjB,EAAYQ,GAAMa,KAAIC,IACrB,MAAM1B,EAAQ0B,EAAKjB,YAAYT,OAAS0B,EAAKC,OAAOC,KAEpD,IAAIpB,EADSkB,EAAKjB,YAAYC,KACbC,MAAM,KACnB2B,EAAQ9B,EAAM,GACd+B,EAAM/B,EAAM,GAChB,MAAqC,SAA9BkB,EAAKjB,YAAYoB,UACM,WAA5BH,EAAKjB,YAAYqB,OACjB,sBAAIC,IAAKL,EAAKC,OAAOC,MACnB,2BACEI,UAAU,iBACVC,WAAS,EACTC,SAAS,6BAET,8BACE,0BACE,gBAAC,EAAAC,KAAI,CAACC,GAAIV,EAAKC,OAAOC,KAAMS,SAAS,OACnC,uBAAKnB,MAAOC,EAAckB,SAAS,YACjC,wBAAMnB,MAAOC,GACVmB,EAAM,IAAEC,GAEX,4BAAOvC,SAOjB,IAAI,SAOf,EAWN,MAAMwC,EAAO,IAAM,gBAAC,IAAG,CAACxC,MAAM,a","sources":["webpack://gatsby-starter-blog/./src/pages/index.module.scss","webpack://gatsby-starter-blog/./src/pages/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var day = \"index-module--day--cab09\";\nexport var postsGrid = \"index-module--postsGrid--182a2\";\nexport var title = \"index-module--title--56ee9\";","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nimport * as styles from \"./index.module.scss\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n\n  const postsByYear = data.allMarkdownRemark.edges.reduce((posts, { node }) => {\n    const date = node.frontmatter.date\n    let parts = date.split(\" \")\n    let year = parseInt(parts[0])\n\n    if (!posts[year]) {\n      posts[year] = []\n    }\n    posts[year].push(node)\n    return posts\n  }, {})\n\n  console.log(postsByYear)\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <p>No blog posts found.</p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <div class={styles.postsGrid}>\n        <h2>global</h2>\n        <ol style={{ listStyle: `none` }}>\n          {Object.keys(postsByYear)\n            .reverse()\n            .map(year =>\n              postsByYear[year].map(post => {\n                const title = post.frontmatter.title || post.fields.slug\n                return post.frontmatter.category === \"global\" &&\n                  post.frontmatter.status === \"public\" ? (\n                  <li key={post.fields.slug}>\n                    <article\n                      className=\"post-list-item\"\n                      itemScope\n                      itemType=\"http://schema.org/Article\"\n                    >\n                      <header>\n                        <h3>\n                          <Link to={post.fields.slug} itemProp=\"url\">\n                            <span itemProp=\"headline\">{title}</span>\n                          </Link>\n                        </h3>\n                      </header>\n                    </article>\n                  </li>\n                ) : null\n              })\n            )}\n        </ol>\n      </div>\n      <div class={styles.postsGrid}>\n        {Object.keys(postsByYear)\n          .reverse()\n          .map(year => {\n            return (\n              <>\n                <h2 class={styles.label}>{year}</h2>\n                <ol style={{ listStyle: `none` }}>\n                  {postsByYear[year].map(post => {\n                    const title = post.frontmatter.title || post.fields.slug\n                    const date = post.frontmatter.date\n                    let parts = date.split(\" \")\n                    let month = parts[1]\n                    let day = parts[2]\n                    return post.frontmatter.category === \"post\" &&\n                      post.frontmatter.status === \"public\" ? (\n                      <li key={post.fields.slug}>\n                        <article\n                          className=\"post-list-item\"\n                          itemScope\n                          itemType=\"http://schema.org/Article\"\n                        >\n                          <header>\n                            <h3>\n                              <Link to={post.fields.slug} itemProp=\"url\">\n                                <div class={styles.title} itemProp=\"headline\">\n                                  <span class={styles.day}>\n                                    {month}-{day}\n                                  </span>\n                                  <span>{title}</span>\n                                </div>\n                              </Link>\n                            </h3>\n                          </header>\n                        </article>\n                      </li>\n                    ) : null\n                  })}\n                </ol>\n              </>\n            )\n          })}\n      </div>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\n/**\n * Head export to define metadata for the page\n *\n * See: https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-head/\n */\nexport const Head = () => <Seo title=\"All posts\" />\n\nexport const pageQuery = graphql`\n  {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { frontmatter: { date: ASC } }\n      filter: { frontmatter: { status: { eq: \"public\" } } }\n    ) {\n      nodes {\n        fields {\n          slug\n        }\n        frontmatter {\n          category\n          date(formatString: \"MM DD YYYY\")\n          title\n          description\n          status\n        }\n      }\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            category\n            date(formatString: \"YYYY MM DD\")\n            status\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["postsGrid","data","location","siteTitle","site","siteMetadata","title","posts","allMarkdownRemark","nodes","postsByYear","edges","reduce","node","parts","frontmatter","date","split","year","parseInt","push","console","log","length","class","styles","style","listStyle","Object","keys","reverse","map","post","fields","slug","category","status","key","className","itemScope","itemType","Link","to","itemProp","month","day","Head"],"sourceRoot":""}